{"changed":false,"filter":false,"title":"application.py","tooltip":"~/workspace/pset6/similarities/application.py","value":"import cs50\nimport re\nfrom flask import Flask, abort, redirect, render_template, request\nfrom html import escape\nfrom werkzeug.exceptions import default_exceptions, HTTPException\n\nfrom helpers import lines, sentences, substrings\n\n# Web app\napp = Flask(__name__)\n\n\n@app.after_request\ndef after_request(response):\n    \"\"\"Disable caching\"\"\"\n    response.headers[\"Cache-Control\"] = \"no-cache, no-store, must-revalidate\"\n    response.headers[\"Expires\"] = 0\n    response.headers[\"Pragma\"] = \"no-cache\"\n    return response\n\n\n@app.route(\"/\")\ndef index():\n    \"\"\"Handle requests for / via GET (and POST)\"\"\"\n    return render_template(\"index.html\")\n\n\n@app.route(\"/compare\", methods=[\"POST\"])\ndef compare():\n    \"\"\"Handle requests for /compare via POST\"\"\"\n\n    # Read files\n    if not request.files[\"file1\"] or not request.files[\"file2\"]:\n        abort(400, \"missing file\")\n    try:\n        file1 = request.files[\"file1\"].read().decode(\"utf-8\")\n        file2 = request.files[\"file2\"].read().decode(\"utf-8\")\n    except Exception:\n        abort(400, \"invalid file\")\n\n    # Compare files\n    if not request.form.get(\"algorithm\"):\n        abort(400, \"missing algorithm\")\n    elif request.form.get(\"algorithm\") == \"lines\":\n        regexes = [f\"^{re.escape(match)}$\" for match in lines(file1, file2)]\n    elif request.form.get(\"algorithm\") == \"sentences\":\n        regexes = [re.escape(match) for match in sentences(file1, file2)]\n    elif request.form.get(\"algorithm\") == \"substrings\":\n        if not request.form.get(\"length\"):\n            abort(400, \"missing length\")\n        elif not int(request.form.get(\"length\")) > 0:\n            abort(400, \"invalid length\")\n        regexes = [re.escape(match) for match in substrings(\n            file1, file2, int(request.form.get(\"length\")))]\n    else:\n        abort(400, \"invalid algorithm\")\n\n    # Highlight files\n    highlights1 = highlight(file1, regexes)\n    highlights2 = highlight(file2, regexes)\n\n    # Output comparison\n    return render_template(\"compare.html\", file1=highlights1, file2=highlights2)\n\n\ndef highlight(s, regexes):\n    \"\"\"Highlight all instances of regexes in s.\"\"\"\n\n    # Get intervals for which strings match\n    intervals = []\n    for regex in regexes:\n        if not regex:\n            continue\n        matches = re.finditer(regex, s, re.MULTILINE)\n        for match in matches:\n            intervals.append((match.start(), match.end()))\n    intervals.sort(key=lambda x: x[0])\n\n    # Combine intervals to get highlighted areas\n    highlights = []\n    for interval in intervals:\n        if not highlights:\n            highlights.append(interval)\n            continue\n        last = highlights[-1]\n\n        # If intervals overlap, then merge them\n        if interval[0] <= last[1]:\n            new_interval = (last[0], interval[1])\n            highlights[-1] = new_interval\n\n        # Else, start a new highlight\n        else:\n            highlights.append(interval)\n\n    # Maintain list of regions: each is a start index, end index, highlight\n    regions = []\n\n    # If no highlights at all, then keep nothing highlighted\n    if not highlights:\n        regions = [(0, len(s), False)]\n\n    # If first region is not highlighted, designate it as such\n    elif highlights[0][0] != 0:\n        regions = [(0, highlights[0][0], False)]\n\n    # Loop through all highlights and add regions\n    for start, end in highlights:\n        if start != 0:\n            prev_end = regions[-1][1]\n            if start != prev_end:\n                regions.append((prev_end, start, False))\n        regions.append((start, end, True))\n\n    # Add final unhighlighted region if necessary\n    if regions[-1][1] != len(s):\n        regions.append((regions[-1][1], len(s), False))\n\n    # Combine regions into final result\n    result = \"\"\n    for start, end, highlighted in regions:\n        escaped = escape(s[start:end])\n        if highlighted:\n            result += f\"<span>{escaped}</span>\"\n        else:\n            result += escaped\n    return result\n\n\n@app.errorhandler(HTTPException)\ndef errorhandler(error):\n    \"\"\"Handle errors\"\"\"\n    return render_template(\"error.html\", error=error), error.code\n\n\n# https://github.com/pallets/flask/pull/2314\nfor code in default_exceptions:\n    app.errorhandler(code)(errorhandler)\n","undoManager":{"mark":-1,"position":-1,"stack":[]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":21,"column":0},"end":{"row":24,"column":40},"isBackwards":true},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1542564740661}